{"version":3,"sources":["components/WalletInfo.js","components/WalletSignIn.js","components/WalletSend.js","components/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["WalletInfo","props","Card","sx","minWidth","CardContent","Typography","fontSize","color","gutterBottom","variant","component","address","balance","network","publicKey","CardActions","Button","onClick","handleSignOut","WalletSignIn","useState","inputValue","setInputValue","Box","noValidate","autoComplete","fullWidth","TextField","required","id","label","onChange","e","target","value","handleSubmit","WalletSend","amount","setAmount","to","setTo","showAlert","setShowAlert","alertMessage","setAlertMessage","evt","a","preventDefault","computer","db","wallet","send","parseInt","txId","message","console","log","alert","disabled","restClient","chain","Alert","severity","AlertTitle","Wallet","seed","setSeed","setComputer","setBalance","useEffect","Computer","getBalance","refresh","getAddress","toString","getPublicKey","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wjBAOe,SAASA,EAAWC,GACjC,OACE,gCACE,yCACA,gBAACC,EAAA,EAAD,CAAMC,GAAI,CAAEC,SAAU,MACpB,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAYH,GAAI,CAAEI,SAAU,IAAMC,MAAM,iBAAiBC,cAAY,GAArE,WAGA,gBAACH,EAAA,EAAD,CAAYI,QAAQ,KAAKC,UAAU,OAChCV,EAAMW,SAGT,2BAEA,gBAACN,EAAA,EAAD,CAAYH,GAAI,CAAEI,SAAU,IAAMC,MAAM,iBAAiBC,cAAY,GAArE,WAGA,gBAACH,EAAA,EAAD,CAAYI,QAAQ,KAAKC,UAAU,OAChCV,EAAMY,QADT,IACmBZ,EAAMa,SAGzB,2BAEA,gBAACR,EAAA,EAAD,CAAYH,GAAI,CAAEI,SAAU,IAAMC,MAAM,iBAAiBC,cAAY,GAArE,cAGA,gBAACH,EAAA,EAAD,CAAYI,QAAQ,KAAKC,UAAU,OAChCV,EAAMc,YAIX,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAQP,QAAQ,YAAYQ,QAASjB,EAAMkB,eAA3C,e,sBCnCK,SAASC,EAAanB,GACnC,MAAoCoB,mBAAS,MAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAMA,OACE,kBAACC,EAAA,EAAD,CAAKb,UAAU,OAAOc,YAAU,EAACC,aAAa,MAAMC,WAAS,GAC3D,kBAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,GAAG,oBACHC,MAAM,cACNJ,WAAW,EACXK,SAAU,SAACC,GAAD,OAAOV,EAAcU,EAAEC,OAAOC,UAE1C,6BACA,6BAEA,kBAAClB,EAAA,EAAD,CAAQP,QAAQ,YAAYQ,QAhBX,WACnBjB,EAAMmC,aAAad,KAejB,oB,sBChBS,SAASe,EAAWpC,GACjC,MAA4BoB,mBAAS,MAArC,mBAAOiB,EAAP,KAAeC,EAAf,KACA,EAAoBlB,mBAAS,MAA7B,mBAAOmB,EAAP,KAAWC,EAAX,KACA,EAAkCpB,oBAAS,GAA3C,mBAAOqB,EAAP,KAAkBC,EAAlB,KACA,EAAwCtB,mBAAS,MAAjD,mBAAOuB,EAAP,KAAqBC,EAArB,KAEMT,EAAY,uCAAG,WAAOU,GAAP,iBAAAC,EAAA,6DACnBD,EAAIE,iBADe,SAEA/C,EAAMgD,SAASC,GAAGC,OAAOC,KAC1CC,SAAkB,IAATf,EAAc,IACvBE,GAJiB,OAEbc,EAFa,OAMbC,EANa,gBAMMjB,EANN,mBAMuBE,EANvB,+BAMgDc,GACnEE,QAAQC,IAAIF,GACZG,MAAMH,GACNZ,GAAa,GACbE,EAAgBU,GAVG,2CAAH,sDAalB,OACE,oCACE,2CAEA,kBAACrD,EAAA,EAAD,KACE,kBAACsB,EAAA,EAAD,CAAKb,UAAU,OAAOc,YAAU,EAACC,aAAa,MAAMC,WAAS,GAC3D,kBAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,GAAG,oBACHC,MAAM,SACN4B,SAAUjB,EACVV,SAAU,SAACC,GAAD,OAAOM,EAAUN,EAAEC,OAAOC,UAEtC,6BACA,6BAEA,kBAACP,EAAA,EAAD,CACEC,UAAQ,EACRC,GAAG,oBACHC,MAAM,KACNJ,WAAW,EACXgC,SAAUjB,EACVV,SAAU,SAACC,GAAD,OAAOQ,EAAMR,EAAEC,OAAOC,UAElC,6BACA,6BAEA,kBAAClB,EAAA,EAAD,CACEP,QAAQ,YACRQ,QAASkB,EACTuB,SAAUjB,GAHZ,QAKQzC,EAAMgD,SAASC,GAAGC,OAAOS,WAAWC,OAG5C,8BAGDnB,EACC,oCACE,kBAACoB,EAAA,EAAD,CAAOC,SAAS,WACd,kBAACC,EAAA,EAAD,gBADF,kBAEY,gCAASpB,IAGrB,kBAAC3B,EAAA,EAAD,CACEC,QAAS,WACPyB,GAAa,GACbE,EAAgB,QAHpB,eAUF,uCC5EK,SAASoB,IACtB,MAAwB5C,mBAAS,MAAjC,mBAAO6C,EAAP,KAAaC,EAAb,KACA,EAAgC9C,mBAAS,MAAzC,mBAAO4B,EAAP,KAAiBmB,EAAjB,KACA,EAA8B/C,mBAAS,GAAvC,mBAAOR,EAAP,KAAgBwD,EAAhB,KAgCA,OAnBAC,qBAAU,WACJJ,GACFE,EACE,IAAIG,WAAS,CACXL,KAAMA,EACNL,MAAO,MACP/C,QAAS,eAId,CAACoD,IAEJI,qBAAU,WAAM,4CACd,sBAAAvB,EAAA,0DACME,EADN,4BACgBoB,EADhB,SACiCpB,EAASC,GAAGC,OAAOqB,aADpD,8EADc,uBAAC,WAAD,wBAIdC,KACC,CAACxB,IAGF,oCACGA,EACC,oCACE,kBAACjD,EAAD,CACEY,QAASqC,EAASC,GAAGC,OAAOuB,aAAaC,WACzC9D,QAASA,EAAU,IACnBE,UAAWkC,EAASC,GAAGC,OAAOyB,eAAeD,WAC7C7D,QAASmC,EAASC,GAAGC,OAAOS,WAAWC,MACvC1C,cAlCY,WACpBgD,EAAQ,MACRC,EAAY,MACZC,EAAW,MAkCL,6BAEA,kBAAChC,EAAD,CAAYY,SAAUA,KAGxB,oCACG,IACD,kBAAC7B,EAAD,CAAcgB,aAjDG,SAACD,GACxBqB,QAAQC,IAAI,2BAA4BtB,GACxCgC,EAAQhC,MA+C+C,MChD5C0C,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACb,EAAD,QCKcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.433d501d.chunk.js","sourcesContent":["import * as React from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Typography from \"@mui/material/Typography\";\nimport CardActions from \"@mui/material/CardActions\";\nimport Button from \"@mui/material/Button\";\n\nexport default function WalletInfo(props) {\n  return (\n    <>\n      <h2>Wallet Info</h2>\n      <Card sx={{ minWidth: 275 }}>\n        <CardContent>\n          <Typography sx={{ fontSize: 12 }} color=\"text.secondary\" gutterBottom>\n            Address\n          </Typography>\n          <Typography variant=\"h5\" component=\"div\">\n            {props.address}\n          </Typography>\n\n          <br />\n\n          <Typography sx={{ fontSize: 12 }} color=\"text.secondary\" gutterBottom>\n            Balance\n          </Typography>\n          <Typography variant=\"h5\" component=\"div\">\n            {props.balance} {props.network}\n          </Typography>\n\n          <br />\n\n          <Typography sx={{ fontSize: 12 }} color=\"text.secondary\" gutterBottom>\n            Public Key\n          </Typography>\n          <Typography variant=\"h5\" component=\"div\">\n            {props.publicKey}\n          </Typography>\n        </CardContent>\n\n        <CardActions>\n          <Button variant=\"contained\" onClick={props.handleSignOut}>\n            Sign Out\n          </Button>\n        </CardActions>\n      </Card>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\n\nexport default function WalletSignIn(props) {\n  const [inputValue, setInputValue] = useState(null);\n\n  const handleSubmit = () => {\n    props.handleSubmit(inputValue);\n  };\n\n  return (\n    <Box component=\"form\" noValidate autoComplete=\"off\" fullWidth>\n      <TextField\n        required\n        id=\"outlined-required\"\n        label=\"Seed Phrase\"\n        fullWidth={true}\n        onChange={(e) => setInputValue(e.target.value)}\n      />\n      <br />\n      <br />\n\n      <Button variant=\"contained\" onClick={handleSubmit}>\n        Set Seed Phrase\n      </Button>\n    </Box>\n  );\n}\n","import React, { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Card from \"@mui/material/Card\";\nimport Button from \"@mui/material/Button\";\nimport Alert from \"@mui/material/Alert\";\nimport AlertTitle from \"@mui/material/AlertTitle\";\n\nexport default function WalletSend(props) {\n  const [amount, setAmount] = useState(null);\n  const [to, setTo] = useState(null);\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertMessage, setAlertMessage] = useState(null);\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n    const txId = await props.computer.db.wallet.send(\n      parseInt(amount * 1e8, 10),\n      to\n    );\n    const message = `Sent\\n${amount}\\n\\nTo\\n${to}\\n\\nTransaction id\\n${txId}`;\n    console.log(message);\n    alert(message);\n    setShowAlert(true);\n    setAlertMessage(message);\n  };\n\n  return (\n    <>\n      <h2>Send Amount</h2>\n\n      <Card>\n        <Box component=\"form\" noValidate autoComplete=\"off\" fullWidth>\n          <TextField\n            required\n            id=\"outlined-required\"\n            label=\"Amount\"\n            disabled={showAlert}\n            onChange={(e) => setAmount(e.target.value)}\n          />\n          <br />\n          <br />\n\n          <TextField\n            required\n            id=\"outlined-required\"\n            label=\"To\"\n            fullWidth={true}\n            disabled={showAlert}\n            onChange={(e) => setTo(e.target.value)}\n          />\n          <br />\n          <br />\n\n          <Button\n            variant=\"contained\"\n            onClick={handleSubmit}\n            disabled={showAlert}\n          >\n            Send {props.computer.db.wallet.restClient.chain}\n          </Button>\n\n          <br />\n        </Box>\n\n        {showAlert ? (\n          <>\n            <Alert severity=\"success\">\n              <AlertTitle>Success</AlertTitle>\n              Message â€” <strong>{alertMessage}</strong>\n            </Alert>\n\n            <Button\n              onClick={() => {\n                setShowAlert(false);\n                setAlertMessage(null);\n              }}\n            >\n              Send more!\n            </Button>\n          </>\n        ) : (\n          <></>\n        )}\n      </Card>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Computer } from \"bitcoin-computer-lib\";\nimport WalletInfo from \"./WalletInfo\";\nimport WalletSignIn from \"./WalletSignIn\";\nimport WalletSend from \"./WalletSend\";\n\nexport default function Wallet() {\n  const [seed, setSeed] = useState(null);\n  const [computer, setComputer] = useState(null);\n  const [balance, setBalance] = useState(0);\n\n  const handleSeedSubmit = (value) => {\n    console.log(\"this called with value: \", value);\n    setSeed(value);\n  };\n\n  const handleSignOut = () => {\n    setSeed(null);\n    setComputer(null);\n    setBalance(0);\n  };\n\n  useEffect(() => {\n    if (seed) {\n      setComputer(\n        new Computer({\n          seed: seed, //describe install ostrich blast region era course junior feed acoustic galaxy annual\n          chain: \"LTC\",\n          network: \"testnet\",\n        })\n      );\n    }\n  }, [seed]);\n\n  useEffect(() => {\n    async function refresh() {\n      if (computer) setBalance(await computer.db.wallet.getBalance());\n    }\n    refresh();\n  }, [computer]);\n\n  return (\n    <>\n      {computer ? (\n        <>\n          <WalletInfo\n            address={computer.db.wallet.getAddress().toString()}\n            balance={balance / 1e8}\n            publicKey={computer.db.wallet.getPublicKey().toString()}\n            network={computer.db.wallet.restClient.chain}\n            handleSignOut={handleSignOut}\n          />\n\n          <br />\n\n          <WalletSend computer={computer} />\n        </>\n      ) : (\n        <>\n          {\" \"}\n          <WalletSignIn handleSubmit={handleSeedSubmit} />{\" \"}\n        </>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Wallet from \"./components/Wallet\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wallet />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}